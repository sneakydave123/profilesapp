import _isCI from 'is-ci';
import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        this.describe =
            'Command to deploy backends in a custom CI/CD pipeline. This command is not intended to be used locally.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new Error('It looks like this command is being run outside of a CI/CD workflow. To deploy locally use `amplify sandbox` instead.');
        }
        const backendId = {
            namespace: args.appId,
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args.outputsVersion, args.outputsOutDir, args.outputsFormat);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('outputs-out-dir', {
            describe: 'A path to directory where amplify_outputs is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        })
            .option('outputs-format', {
            describe: 'amplify_outputs file format',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQU0xQixPQUFPLEVBQ0wsa0JBQWtCLEVBRWxCLHlCQUF5QixFQUN6Qiw2QkFBNkIsR0FDOUIsTUFBTSw0QkFBNEIsQ0FBQztBQWFwQzs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFpQmI7SUFDQTtJQUNBO0lBaEJuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHFCQUFtRCxFQUNuRCxlQUFnQyxFQUNoQyxrQkFBZ0MsS0FBSztRQUZyQywwQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBQ25ELG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBc0I7UUFFdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUTtZQUNYLHlHQUF5RyxDQUFDO0lBQzlHLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBc0QsRUFDdkMsRUFBRTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLHVIQUF1SCxDQUN4SCxDQUFDO1NBQ0g7UUFFRCxNQUFNLFNBQVMsR0FBc0I7WUFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNqQixJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7UUFDRixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUMzQyxrQkFBa0IsRUFBRSxJQUFJO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixDQUN6RCxTQUFTLEVBQ1QsSUFBSSxDQUFDLGNBQXFDLEVBQzFDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQXNDLEVBQUU7UUFDNUQsT0FBTyxLQUFLO2FBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQzthQUNkLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLHVDQUF1QztZQUNqRCxZQUFZLEVBQUUsSUFBSTtZQUNsQixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLHNDQUFzQztZQUNoRCxZQUFZLEVBQUUsSUFBSTtZQUNsQixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtZQUN6QixRQUFRLEVBQ04sc0hBQXNIO1lBQ3hILElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pCLFFBQVEsRUFDTiw2SkFBNko7WUFDL0osSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDO1lBQ2pELE9BQU8sRUFBRSw2QkFBNkI7U0FDdkMsQ0FBQzthQUNELE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixRQUFRLEVBQUUsNkJBQTZCO1lBQ3ZDLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztTQUMzQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfaXNDSSBmcm9tICdpcy1jaSc7XG5pbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ0Zvcm1hdCxcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbixcbiAgREVGQVVMVF9DTElFTlRfQ09ORklHX1ZFUlNJT04sXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJztcblxuZXhwb3J0IHR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucyA9XG4gIEFyZ3VtZW50c0tlYmFiQ2FzZTxQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlPjtcblxudHlwZSBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBicmFuY2g6IHN0cmluZztcbiAgYXBwSWQ6IHN0cmluZztcbiAgb3V0cHV0c0Zvcm1hdDogQ2xpZW50Q29uZmlnRm9ybWF0IHwgdW5kZWZpbmVkO1xuICBvdXRwdXRzVmVyc2lvbjogc3RyaW5nO1xuICBvdXRwdXRzT3V0RGlyPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBbiBlbnRyeSBwb2ludCBmb3IgZGVwbG95IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQaXBlbGluZURlcGxveUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRvcCBsZXZlbCBlbnRyeSBwb2ludCBmb3IgZGVwbG95IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudENvbmZpZ0dlbmVyYXRvcjogQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmREZXBsb3llcjogQmFja2VuZERlcGxveWVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaXNDaUVudmlyb25tZW50OiB0eXBlb2YgX2lzQ0kgPSBfaXNDSVxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAncGlwZWxpbmUtZGVwbG95JztcbiAgICB0aGlzLmRlc2NyaWJlID1cbiAgICAgICdDb21tYW5kIHRvIGRlcGxveSBiYWNrZW5kcyBpbiBhIGN1c3RvbSBDSS9DRCBwaXBlbGluZS4gVGhpcyBjb21tYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGxvY2FsbHkuJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgaWYgKCF0aGlzLmlzQ2lFbnZpcm9ubWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSXQgbG9va3MgbGlrZSB0aGlzIGNvbW1hbmQgaXMgYmVpbmcgcnVuIG91dHNpZGUgb2YgYSBDSS9DRCB3b3JrZmxvdy4gVG8gZGVwbG95IGxvY2FsbHkgdXNlIGBhbXBsaWZ5IHNhbmRib3hgIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyID0ge1xuICAgICAgbmFtZXNwYWNlOiBhcmdzLmFwcElkLFxuICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICB9O1xuICAgIGF3YWl0IHRoaXMuYmFja2VuZERlcGxveWVyLmRlcGxveShiYWNrZW5kSWQsIHtcbiAgICAgIHZhbGlkYXRlQXBwU291cmNlczogdHJ1ZSxcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLmNsaWVudENvbmZpZ0dlbmVyYXRvci5nZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZShcbiAgICAgIGJhY2tlbmRJZCxcbiAgICAgIGFyZ3Mub3V0cHV0c1ZlcnNpb24gYXMgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgICAgIGFyZ3Mub3V0cHV0c091dERpcixcbiAgICAgIGFyZ3Mub3V0cHV0c0Zvcm1hdFxuICAgICk7XG4gIH07XG5cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLnZlcnNpb24oZmFsc2UpXG4gICAgICAub3B0aW9uKCdicmFuY2gnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnTmFtZSBvZiB0aGUgZ2l0IGJyYW5jaCBiZWluZyBkZXBsb3llZCcsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdhcHAtaWQnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnVGhlIGFwcCBpZCBvZiB0aGUgdGFyZ2V0IEFtcGxpZnkgYXBwJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ291dHB1dHMtb3V0LWRpcicsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ0EgcGF0aCB0byBkaXJlY3Rvcnkgd2hlcmUgYW1wbGlmeV9vdXRwdXRzIGlzIHdyaXR0ZW4uIElmIG5vdCBwcm92aWRlZCBkZWZhdWx0cyB0byBjdXJyZW50IHByb2Nlc3Mgd29ya2luZyBkaXJlY3RvcnkuJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXRwdXRzLXZlcnNpb24nLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdWZXJzaW9uIG9mIHRoZSBjb25maWd1cmF0aW9uLiBWZXJzaW9uIDAgcmVwcmVzZW50cyBjbGFzc2ljIGFtcGxpZnktY2xpIGNvbmZpZyBmaWxlIGFtcGxpZnktY29uZmlndXJhdGlvbiBhbmQgMSByZXByZXNlbnRzIG5ld2VyIGNvbmZpZyBmaWxlIGFtcGxpZnlfb3V0cHV0cycsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbiksXG4gICAgICAgIGRlZmF1bHQ6IERFRkFVTFRfQ0xJRU5UX0NPTkZJR19WRVJTSU9OLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ291dHB1dHMtZm9ybWF0Jywge1xuICAgICAgICBkZXNjcmliZTogJ2FtcGxpZnlfb3V0cHV0cyBmaWxlIGZvcm1hdCcsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnRm9ybWF0KSxcbiAgICAgIH0pO1xuICB9O1xufVxuIl19