import { PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { SSMClient } from '@aws-sdk/client-ssm';
import { getSecretClient } from '@aws-amplify/backend-secret';
import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
import { LambdaClient } from '@aws-sdk/client-lambda';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { LambdaFunctionLogStreamer } from './lambda_function_log_streamer.js';
import { CloudWatchLogEventMonitor } from './cloudwatch_logs_monitor.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    printer;
    format;
    instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, printer, format) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.printer = printer;
        this.format = format;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!this.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), this.format);
            const cfnClient = new CloudFormationClient();
            this.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClient(), this.printer), new SSMClient(), new LambdaFunctionLogStreamer(new LambdaClient(), cfnClient, new CloudWatchLogEventMonitor(new CloudWatchLogsClient()), BackendOutputClientFactory.getInstance(), this.printer), this.printer);
        }
        return this.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwrQkFBK0IsR0FFaEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFNZjtJQUNBO0lBQ0E7SUFQWCxRQUFRLENBQXNCO0lBQ3RDOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLE9BQWdCLEVBQ2hCLE1BQWM7UUFGZCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTBCO1FBQzNDLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUM5QixDQUFDO0lBRUo7O09BRUc7SUFDSCxXQUFXLEdBQUcsS0FBSyxJQUFzQixFQUFFO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sK0JBQStCLEdBQ25DLElBQUksK0JBQStCLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuRSxNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLENBQ3ZELCtCQUErQixDQUFDLDJCQUEyQixFQUFFLEVBQzdELElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztZQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxzQkFBc0IsQ0FDeEIsc0JBQXNCLENBQUMsV0FBVyxFQUFFLEVBQ3BDLGVBQWUsRUFBRSxFQUNqQixJQUFJLENBQUMsT0FBTyxDQUNiLEVBQ0QsSUFBSSxTQUFTLEVBQUUsRUFDZixJQUFJLHlCQUF5QixDQUMzQixJQUFJLFlBQVksRUFBRSxFQUNsQixTQUFTLEVBQ1QsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLG9CQUFvQixFQUFFLENBQUMsRUFDekQsMEJBQTBCLENBQUMsV0FBVyxFQUFFLEVBQ3hDLElBQUksQ0FBQyxPQUFPLENBQ2IsRUFDRCxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZvcm1hdCxcbiAgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSxcbiAgUHJpbnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEZpbGVXYXRjaGluZ1NhbmRib3ggfSBmcm9tICcuL2ZpbGVfd2F0Y2hpbmdfc2FuZGJveC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRTYW5kYm94UmVzb2x2ZXIsIFNhbmRib3ggfSBmcm9tICcuL3NhbmRib3guanMnO1xuaW1wb3J0IHsgQmFja2VuZERlcGxveWVyRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IEFtcGxpZnlTYW5kYm94RXhlY3V0b3IgfSBmcm9tICcuL3NhbmRib3hfZXhlY3V0b3IuanMnO1xuaW1wb3J0IHsgU1NNQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNzbSc7XG5pbXBvcnQgeyBnZXRTZWNyZXRDbGllbnQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgQ2xvdWRXYXRjaExvZ3NDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC1sb2dzJztcbmltcG9ydCB7IExhbWJkYUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1sYW1iZGEnO1xuaW1wb3J0IHsgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgTGFtYmRhRnVuY3Rpb25Mb2dTdHJlYW1lciB9IGZyb20gJy4vbGFtYmRhX2Z1bmN0aW9uX2xvZ19zdHJlYW1lci5qcyc7XG5pbXBvcnQgeyBDbG91ZFdhdGNoTG9nRXZlbnRNb25pdG9yIH0gZnJvbSAnLi9jbG91ZHdhdGNoX2xvZ3NfbW9uaXRvci5qcyc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5cbi8qKlxuICogRmFjdG9yeSB0byBjcmVhdGUgYSBuZXcgc2FuZGJveFxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNpbmdsZXRvbkZhY3Rvcnkge1xuICBwcml2YXRlIGluc3RhbmNlOiBTYW5kYm94IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogc2FuZGJveElkUmVzb2x2ZXIgYWxsb3dzIHNhbmRib3ggdG8gbGF6aWx5IGxvYWQgdGhlIHNhbmRib3ggYmFja2VuZCBpZCBvbiBkZW1hbmRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveElkUmVzb2x2ZXI6IEJhY2tlbmRJZFNhbmRib3hSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmb3JtYXQ6IEZvcm1hdFxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBTYW5kYm94XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IGFzeW5jICgpOiBQcm9taXNlPFNhbmRib3g+ID0+IHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIGNvbnN0IHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkgPVxuICAgICAgICBuZXcgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeShwcm9jZXNzLmN3ZCgpLCB0aGlzLnByaW50ZXIpO1xuICAgICAgY29uc3QgYmFja2VuZERlcGxveWVyRmFjdG9yeSA9IG5ldyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5KFxuICAgICAgICBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5LmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpLFxuICAgICAgICB0aGlzLmZvcm1hdFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNmbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBGaWxlV2F0Y2hpbmdTYW5kYm94KFxuICAgICAgICB0aGlzLnNhbmRib3hJZFJlc29sdmVyLFxuICAgICAgICBuZXcgQW1wbGlmeVNhbmRib3hFeGVjdXRvcihcbiAgICAgICAgICBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICAgICAgZ2V0U2VjcmV0Q2xpZW50KCksXG4gICAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTU01DbGllbnQoKSxcbiAgICAgICAgbmV3IExhbWJkYUZ1bmN0aW9uTG9nU3RyZWFtZXIoXG4gICAgICAgICAgbmV3IExhbWJkYUNsaWVudCgpLFxuICAgICAgICAgIGNmbkNsaWVudCxcbiAgICAgICAgICBuZXcgQ2xvdWRXYXRjaExvZ0V2ZW50TW9uaXRvcihuZXcgQ2xvdWRXYXRjaExvZ3NDbGllbnQoKSksXG4gICAgICAgICAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkuZ2V0SW5zdGFuY2UoKSxcbiAgICAgICAgICB0aGlzLnByaW50ZXJcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfTtcbn1cbiJdfQ==