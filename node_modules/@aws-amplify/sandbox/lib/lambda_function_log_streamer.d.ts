import { Printer } from '@aws-amplify/cli-core';
import { BackendOutputClient } from '@aws-amplify/deployed-backend-client';
import { BackendIdentifier } from '@aws-amplify/plugin-types';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { LambdaClient } from '@aws-sdk/client-lambda';
import { CloudWatchLogEventMonitor } from './cloudwatch_logs_monitor.js';
import { SandboxFunctionStreamingOptions } from './sandbox.js';
/**
 * Logs streamer for customer defined lambda functions in a sandbox.
 */
export declare class LambdaFunctionLogStreamer {
    private readonly lambda;
    private readonly cfnClient;
    private readonly logsMonitor;
    private readonly backendOutputClient;
    private readonly printer;
    private enabled;
    /**
     * Creates an instance of LambdaFunctionLogStreamer
     */
    constructor(lambda: LambdaClient, cfnClient: CloudFormationClient, logsMonitor: CloudWatchLogEventMonitor, backendOutputClient: BackendOutputClient, printer: Printer);
    /**
     * Starts streaming logs in the given sandbox.
     * @param sandboxBackendId The sandbox backend identifier.
     * @param streamingOptions Options to configure the log streaming.
     */
    startStreamingLogs: (sandboxBackendId: BackendIdentifier, streamingOptions?: SandboxFunctionStreamingOptions) => Promise<void>;
    stopStreamingLogs: () => void;
    /**
     * Adds functionArn for each function name provided. All the ARN components are taken from the root stack Arn
     * @param sandboxBackendId backendId for retrieving the root stack
     * @param functionNames Name of the functions for which ARN needs to be generated
     * @returns An object containing function name and ARN for each function name provided
     */
    private getFunctionArnFromNames;
}
//# sourceMappingURL=lambda_function_log_streamer.d.ts.map